---
import type { RoundModel } from "../Round/Round";

interface RoundsProps {
  rounds: RoundModel[];
}

const { rounds } = Astro.props as RoundsProps;

function calculateStats(holes: RoundModel['holes']) {
  const fairwaysHit = holes.filter(hole => hole.fairwayStatus === "Hit").length;
  const greensInRegulation = holes.filter(hole => hole.isGreenInRegulation).length;
  const twoPuttOrLess = holes.filter(hole => hole.isTwoPuttOrLess).length;
  const totalHoles = holes.length;
  
  return {
    fairwaysHit,
    greensInRegulation,
    twoPuttOrLess,
    totalHoles,
    holesWithFairways: holes.filter(hole => hole.par > 3).length,
  };
}
---

<div style="padding: 1rem;">
  <div class="header">
    <h3>All Rounds</h3>
    <div class="header-actions">
      <a href="/new-round" class="new-round-btn">New Round</a>
    </div>
  </div>
  <div class="toggle-container">
    <span class="toggle-label">Fractions</span>
    <label class="toggle-switch">
      <input type="checkbox" id="toggle-stats">
      <span class="toggle-slider"></span>
    </label>
    <span class="toggle-label">Percentages</span>
  </div>
  <div>
      {rounds.map((round) => {
        const stats = calculateStats(round.holes);
        return (
          <div class="round-card">
            <div style={{display: 'flex', justifyContent: 'space-between', fontSize: '0.825rem', fontWeight: 'bold', color: '#2f5b40'}}>
              <div>{round.courseName}</div>
              <div>{round.date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</div>
            </div>
            <div style={{display: 'flex', justifyContent: 'space-between'}}>
              <div class="stat"><span style={{fontSize: '0.5rem', fontWeight: 'bold', }}>score: </span><span>{round.score}</span></div>
              <div class="stat">
                <span style={{fontSize: '0.5rem', fontWeight: 'bold', }}>Fairways: </span><span class="value" data-fraction={`${stats.fairwaysHit}/${stats.holesWithFairways}`} data-percentage={`${Math.round((stats.fairwaysHit / stats.holesWithFairways) * 100)}%`}>{stats.fairwaysHit}/{stats.holesWithFairways}</span>
              </div>
              <div class="stat">
                <span style={{fontSize: '0.5rem', fontWeight: 'bold', }}>GIR: </span><span class="value" data-fraction={`${stats.greensInRegulation}/${stats.totalHoles}`} data-percentage={`${Math.round((stats.greensInRegulation / stats.totalHoles) * 100)}%`}>{stats.greensInRegulation}/{stats.totalHoles}</span>
              </div>
              <div class="stat">
                <span style={{fontSize: '0.5rem', fontWeight: 'bold', }}>2-Putt or Less: </span><span class="value" data-fraction={`${stats.twoPuttOrLess}/${stats.totalHoles}`} data-percentage={`${Math.round((stats.twoPuttOrLess / stats.totalHoles) * 100)}%`}>{stats.twoPuttOrLess}</span>
              </div>
            </div>
          </div>
          );
        })}
  </div>
</div>

<script>
  const toggleBtn = document.getElementById('toggle-stats') as HTMLInputElement;
  let showingPercentages = false;

  toggleBtn?.addEventListener('change', () => {
    showingPercentages = toggleBtn.checked;
    
    document.querySelectorAll('.stat .value').forEach(stat => {
      const fraction = stat.getAttribute('data-fraction');
      const percentage = stat.getAttribute('data-percentage');
      stat.textContent = showingPercentages ? percentage : fraction;
    });
  });
</script>

<style>
  .header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
  }

  .header-actions {
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .toggle-container {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .toggle-label {
    font-size: 0.9rem;
    color: #666;
  }

  .toggle-switch {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 24px;
  }

  .toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 24px;
  }

  .toggle-slider:before {
    position: absolute;
    content: "";
    height: 16px;
    width: 16px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
  }

  input:checked + .toggle-slider {
    background-color: #007bff;
  }

  input:checked + .toggle-slider:before {
    transform: translateX(26px);
  }

  .new-round-btn {
    padding: 0.5rem 1rem;
    background-color: #e0917c;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: background-color 0.2s;
    text-decoration: none;
  }

  .new-round-btn:hover {
    background-color: #c6816e;
  }

  .round-card {
    padding: 0.75rem;
    background-color: #f8f6f2;
    border-radius: 0.5rem;
    margin-bottom: 0.5rem;
  }

  .stat {
    color: #2d2d2d;
    display: grid;
    grid-template-rows: 1fr 1fr;
    align-items: center;
    justify-items: center;
  }

</style>